/**  https://leetcode.com/problems/subsets-ii/
  */


class Solution {
public:
    void subSet(vector<int> &nums, int i, vector<int> &set, vector<vector<int>> &Res)
    {
        // inserting set into Result
        Res.push_back(set);
        for(int j = i; j < nums.size(); j++)
        {
            // check for duplicates
            if (j != i && nums[j] == nums[j - 1])
            {
                exit ;
            }
            else
            {
                /** insert the present element into set 
                    then call for the remaining array
                    */
                set.push_back(nums[j]);
                subSet(nums,j+1, set, Res);
                set.pop_back();
            }
        }
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> Res;
        vector<int> set;
        // sort the array so that all duplicates come together
        sort(nums.begin(), nums.end());
        subSet(nums, 0, set, Res);
        return Res;
    }
};
